<snippet>
  <content><![CDATA[
<exec when="init">
survey_path = gv.survey.path.split("/")[-2] if gv.survey.path.split("/")[-1] in ["temp-edit-live", "temp-view"] else gv.survey.path.split("/")[-1]
# Adhoc = AD / Tracking = TRC
imgdr = "https://nielsenkor.cafe24.com/Decipher/AD/{}".format(survey_path)

from datetime import datetime
import random

def status(condt,label):
    if condt : 
      RespStatus.val=getattr(RespStatus,"{}".format(label)).index

def soft_Err(cond, str, high_rows=[], high_cols=[]):
  if cond :
    if p.chk==0 :
      p.chk=1
    else :
      p.chk=0
      if high_rows :
        for each in high_rows :
          error(str, row=each)

      elif high_cols :
        for each in high_cols :
          error(str, col=each)
      else :
        error(str)
  else :
    p.chk=1

def samegrid():
  qid = allQuestions[this.label]
  checkAnswer = [i.label for i in qid.rows if not i.val == None]
  if len(checkAnswer) gt 1 :
    if len(set(qid.val)-set([None])) == 1:
      soft_Err(True, "%s&lt;br /&gt;%s"%(res.samegrid, res.softerr))
    else :
      p.chk=1
  else :
    p.chk=1

def rankCnt(multiBase,maxRank):
  cnt = maxRank
  if not multiBase.count ge maxRank :
    cnt = multiBase.count
  return cnt


# dupchk open list
def checkOpen():
  str_1=res.err2010
  str_2=res.err2011
  str_3=res.err2012

  set_list=[]
  
  vals=[i.val for i in this.rows if not i.val == None]
  for s in vals:
    if s != "" :
      flag=True
      set_list.append(s.upper())


  if not set_list :
    error(str_1)
  else :
    for j in range(0,len(set_list)-1):
        preval=this.rows[j].val
        st=j+1
        for i in range(st,len(set_list)):
            postval=this.rows[i].val
            if preval != "" and postval != "" :
              if preval==postval:
                  error(str_2)

    for k in range(0,len(set_list)):
      if this.rows[k].val=="":
        error(str_3)


# TMO Error
def checkDuplicates(Qid) :
  # before Q
  Arr=[]
  
  # Curret Q
  Brr=[]
  
  # Label Array
  Crr=[]
  
  vls=allQuestions[Qid].values

  for i in vls:
    if not i == None :
      Arr.append(i.upper())
      Crr.append(i)

  for j in this.values:
    if not j == None :
      Brr.append(j.upper())


  if len(Arr) gt 0 and len(Brr) gt 0:
    if (Brr[0]!=""):
      for i in range(0,len(Brr)):
        preText=Brr[i]
        for j in range(0,len(Arr)):
          currentText=Arr[j]
          if preText!="" and currentText!="":
            if preText==currentText:
              errstr=Crr[j]+'-'+res.err2050
              error(errstr)
              break


def badtext() :
  tt=[i.replace(" ","") for i in this.values if not i==None]
  badhan=(res.badhan)
  badhan=badhan.split(',')

  badspa=(res.badspa)
  badspa=badspa.split(',')


  for i in range(0,len(tt)) :
    current_v=tt[i]
    current_len=len(current_v)
    for j in range(0,int(current_len),3) :
      fn=j
      ln=int(j)+3
      if current_v[fn:ln] in badhan :
        if decLang == 'korean' :
          error(res.badhan_err)


  for i in range(0,len(tt)) :
    current_v=tt[i]
    current_len=len(current_v)
    for j in range(0,int(current_len),1) :
      if current_v[j] in badspa :
        error(res.badspa_err)
</exec>

<suspend/>

<exec when="verified">
p.chk = 1
</exec>

<suspend/>

<radio 
  label="RespStatus"
  where="execute,survey,report">
  <title>STATUS</title>
  <exec>
#incomplete
status(True,'r2')
  </exec>

  <row label="r1" value="1">complete</row>
  <row label="r2" value="2">incomplete</row>
  <row label="AgreeC" value="3">Agree-Close</row>
  <row label="Scr_Video" value="4">Scr_Video</row>
  <row label="Scr_Audio" value="5">Scr_Audio</row>
  <row label="r96" value="96">Removed - Over Quota/ Sample</row>
  <row label="r97" value="97">Removed - QC</row>
  <row label="r98" value="98">Unsubscribed</row>
  <row label="r99" value="99">Failed Data Trapping Test</row>
</radio>

<suspend/>
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>client.py</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>text.xml</scope>
</snippet>