<snippet>
  <content><![CDATA[
<res label="rate_show_score_text">%s <strong>(%sÏ†ê)</strong></res>

<exec when="init">
def rate_show_score(curr, base) :
  for row in curr.rows :
    if base.attr(row.label).any :
      row.text = res.rate_show_score_text%(base.attr(row.label).text, base.cols[base.attr(row.label).val].value)

def scale_rank_items(scale_qid, rank_qid, reverse=True) :
    scale_answer = {x.label: x.val for x in scale_qid.rows.order if x.any}
    sorted_list = sorted(scale_answer.items(), key=lambda item: item[1], reverse=reverse)

    rank_cols = [each for each in rank_qid.cols]
    if not reverse :
      rank_cols.reverse()

    sort_rows = []
    current_value = None
    current_group = []

    for item in sorted_list:
        key, value = item
        if value != current_value:
            if current_group: 
                sort_rows.append(current_group)
            current_group = [key]
            current_value = value
        else:
            current_group.append(key)

    if current_group:
        sort_rows.append(current_group)

    rank_able_answer = []
    rank_auto_row = {}
    rowCond = []
    for idx, eachCol in enumerate(rank_cols) :
      row_label = sort_rows[idx]
      rank_able_answer.append(row_label)

      if len(rowCond) ge len(rank_cols) :
        continue

      for x in row_label :
        rowCond.append(x)

    rank_qid.rows.order = [scale_qid.attr(each).index for each in sum(sort_rows, [])]

    skip_cond = all(len(row)==1 for row in rank_able_answer)
    
    print(rank_able_answer)
    print(rowCond)

    able_ans = {}
    start_index = 0
    for row in rank_able_answer :
      for x in range(start_index, len(row)+start_index) :
        if x ge len(rank_qid.cols) :
          break
        col_label = rank_qid.cols[x].label

        if not col_label in able_ans.keys() :
          able_ans[col_label] = row
          start_index+=1

    auto_rows = {}
    for key, row_list in able_ans.items() :
      if len(row_list) == 1 :
        auto_rows[key] = row_list
        rank_qid.attr(key).val = rank_qid.attr(row_list[0]).index

    return {
      'show' : rowCond,
      'skip' : skip_cond,
      'auto' : auto_rows
    }
</exec>
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>scale.rank</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>text.xml</scope>
</snippet>
